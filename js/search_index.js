var search_data = {"index":{"searchIndex":["lisk","api","client","delegate","legacy","raw","accounts()","accounts()","accounts_delegates()","accounts_delegates_get_by_address()","accounts_delegates_put()","accounts_generate_public_key()","accounts_get_balance()","accounts_get_public_key()","accounts_open()","blocks()","blocks()","blocks_get_by_id()","blocks_get_fee()","blocks_get_fees()","blocks_get_height()","blocks_get_milestone()","blocks_get_nethash()","blocks_get_reward()","blocks_get_status()","blocks_get_supply()","configure()","dapps()","dapps()","dapps_categories()","dapps_get_by_id()","dapps_install()","dapps_installed()","dapps_installed_ids()","dapps_installing()","dapps_launch()","dapps_launched()","dapps_put()","dapps_search()","dapps_stop()","dapps_uninstall()","dapps_uninstalling()","delegates()","delegates()","delegates_count()","delegates_forgers()","delegates_forging()","delegates_forging_disable()","delegates_forging_enable()","delegates_forging_get_forged_by_account()","delegates_get_by_key()","delegates_get_by_name()","delegates_get_next_forgers()","delegates_put()","delegates_search()","delegates_voters()","get_available_supply()","get_banned_peers()","get_best_block()","get_block_reward()","get_broadhash()","get_chain_best_block()","get_connected_peers()","get_disconnected_peers()","get_epoch()","get_milestone()","get_nethash()","get_peer_count()","get_peers()","get_remaining_blocks()","get_version()","get_version_build()","get_version_commit()","is_alive?()","is_chain_loaded?()","is_registered?()","is_syncing?()","loader_status()","loader_status_ping()","loader_status_sync()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","multisignatures_accounts()","multisignatures_pending()","multisignatures_put()","multisignatures_sign()","new()","new()","new()","new()","node_constants()","node_status()","peers()","peers()","peers_get()","peers_version()","query_get()","query_post()","query_put()","register()","set_secrets()","signatures()","signatures_fee()","signatures_put()","transactions()","transactions()","transactions_get_by_id()","transactions_put()","transactions_queued()","transactions_queued_get_by_id()","transactions_unconfirmed()","transactions_unconfirmed()","transactions_unconfirmed_get_by_id()","transactions_unprocessed()","transactions_unsigned()","voters()","votes()","code_of_conduct","gemfile","gemfile.lock","license","readme","rakefile","debug","setup","lisk.gemspec"],"longSearchIndex":["lisk","lisk::api","lisk::client","lisk::delegate","lisk::legacy","lisk::raw","lisk::legacy#accounts()","lisk::raw#accounts()","lisk::legacy#accounts_delegates()","lisk::legacy#accounts_delegates_get_by_address()","lisk::legacy#accounts_delegates_put()","lisk::legacy#accounts_generate_public_key()","lisk::legacy#accounts_get_balance()","lisk::legacy#accounts_get_public_key()","lisk::legacy#accounts_open()","lisk::legacy#blocks()","lisk::raw#blocks()","lisk::legacy#blocks_get_by_id()","lisk::legacy#blocks_get_fee()","lisk::legacy#blocks_get_fees()","lisk::legacy#blocks_get_height()","lisk::legacy#blocks_get_milestone()","lisk::legacy#blocks_get_nethash()","lisk::legacy#blocks_get_reward()","lisk::legacy#blocks_get_status()","lisk::legacy#blocks_get_supply()","lisk::client#configure()","lisk::legacy#dapps()","lisk::raw#dapps()","lisk::legacy#dapps_categories()","lisk::legacy#dapps_get_by_id()","lisk::legacy#dapps_install()","lisk::legacy#dapps_installed()","lisk::legacy#dapps_installed_ids()","lisk::legacy#dapps_installing()","lisk::legacy#dapps_launch()","lisk::legacy#dapps_launched()","lisk::legacy#dapps_put()","lisk::legacy#dapps_search()","lisk::legacy#dapps_stop()","lisk::legacy#dapps_uninstall()","lisk::legacy#dapps_uninstalling()","lisk::legacy#delegates()","lisk::raw#delegates()","lisk::legacy#delegates_count()","lisk::raw#delegates_forgers()","lisk::raw#delegates_forging()","lisk::legacy#delegates_forging_disable()","lisk::legacy#delegates_forging_enable()","lisk::legacy#delegates_forging_get_forged_by_account()","lisk::legacy#delegates_get_by_key()","lisk::legacy#delegates_get_by_name()","lisk::legacy#delegates_get_next_forgers()","lisk::legacy#delegates_put()","lisk::legacy#delegates_search()","lisk::legacy#delegates_voters()","lisk::api#get_available_supply()","lisk::api#get_banned_peers()","lisk::api#get_best_block()","lisk::api#get_block_reward()","lisk::api#get_broadhash()","lisk::api#get_chain_best_block()","lisk::api#get_connected_peers()","lisk::api#get_disconnected_peers()","lisk::api#get_epoch()","lisk::api#get_milestone()","lisk::api#get_nethash()","lisk::api#get_peer_count()","lisk::api#get_peers()","lisk::api#get_remaining_blocks()","lisk::api#get_version()","lisk::api#get_version_build()","lisk::api#get_version_commit()","lisk::client#is_alive?()","lisk::api#is_chain_loaded?()","lisk::delegate#is_registered?()","lisk::api#is_syncing?()","lisk::legacy#loader_status()","lisk::legacy#loader_status_ping()","lisk::legacy#loader_status_sync()","lisk#method_missing()","lisk::api#method_missing()","lisk::client#method_missing()","lisk::legacy#method_missing()","lisk::raw#method_missing()","lisk::legacy#multisignatures_accounts()","lisk::legacy#multisignatures_pending()","lisk::legacy#multisignatures_put()","lisk::legacy#multisignatures_sign()","lisk::client::new()","lisk::delegate::new()","lisk::legacy::new()","lisk::raw::new()","lisk::raw#node_constants()","lisk::raw#node_status()","lisk::legacy#peers()","lisk::raw#peers()","lisk::legacy#peers_get()","lisk::legacy#peers_version()","lisk::client#query_get()","lisk::client#query_post()","lisk::client#query_put()","lisk::delegate#register()","lisk::delegate#set_secrets()","lisk::raw#signatures()","lisk::legacy#signatures_fee()","lisk::legacy#signatures_put()","lisk::legacy#transactions()","lisk::raw#transactions()","lisk::legacy#transactions_get_by_id()","lisk::legacy#transactions_put()","lisk::legacy#transactions_queued()","lisk::legacy#transactions_queued_get_by_id()","lisk::legacy#transactions_unconfirmed()","lisk::raw#transactions_unconfirmed()","lisk::legacy#transactions_unconfirmed_get_by_id()","lisk::raw#transactions_unprocessed()","lisk::raw#transactions_unsigned()","lisk::raw#voters()","lisk::raw#votes()","","","","","","","","",""],"info":[["Lisk","","Lisk.html","","<p>The Lisk API Ruby wrapper gem.\n<p>The Lisk API Ruby wrapper gem.\n<p>The Lisk API Ruby wrapper gem.\n"],["Lisk::API","","Lisk/API.html","","<p>Helper functions to wrap raw legacy APIs into meaningul methods.\n"],["Lisk::Client","","Lisk/Client.html","","<p>A simple HTTP client connecting to a Lisk Core API node.\n"],["Lisk::Delegate","","Lisk/Delegate.html","",""],["Lisk::Legacy","","Lisk/Legacy.html","","<p>Implements raw legacy APIs of the Lisk Core pre-1.0.0 node.\n"],["Lisk::Raw","","Lisk/Raw.html","","<p>Implements raw APIs of the Lisk Core node.\n"],["accounts","Lisk::Legacy","Lisk/Legacy.html#method-i-accounts","(address)","<p>Returns account information of an address. `GET /accounts?address=address`\n"],["accounts","Lisk::Raw","Lisk/Raw.html#method-i-accounts","()","<p>The “accounts” API\n"],["accounts_delegates","Lisk::Legacy","Lisk/Legacy.html#method-i-accounts_delegates","(address)","<p>Get votes by account wallet address. `GET\n/accounts/delegates/?address=address`\n"],["accounts_delegates_get_by_address","Lisk::Legacy","Lisk/Legacy.html#method-i-accounts_delegates_get_by_address","(address)","<p>Returns delegate vote accounts by address. `GET\n/accounts/delegates?address=address`\n"],["accounts_delegates_put","Lisk::Legacy","Lisk/Legacy.html#method-i-accounts_delegates_put","(votes)","<p>Vote for the selected delegates. Maximum of 33 delegates at once. `PUT\n/accounts/delegates`\n"],["accounts_generate_public_key","Lisk::Legacy","Lisk/Legacy.html#method-i-accounts_generate_public_key","(secret)","<p>Returns the public key of the provided secret key. `POST\n/accounts/generatePublicKey`\n"],["accounts_get_balance","Lisk::Legacy","Lisk/Legacy.html#method-i-accounts_get_balance","(address)","<p>Request the balance of an account. `GET\n/accounts/getBalance?address=address`\n"],["accounts_get_public_key","Lisk::Legacy","Lisk/Legacy.html#method-i-accounts_get_public_key","(address)","<p>Get the public key of an account. If the account does not exist the API\ncall will return an error. `GET …\n"],["accounts_open","Lisk::Legacy","Lisk/Legacy.html#method-i-accounts_open","(secret)","<p>Request information about an account. `POST /accounts/open`\n"],["blocks","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks","(filter = nil)","<p>Gets all blocks by provided filter(s). `GET\n/blocks?generatorPublicKey=generatorPublicKey&amp;height=height&amp;previousBlock=previousBlock&amp;totalAmount=totalAmount&amp;totalFee=totalFee&amp;limit=limit&amp;offset=offset&amp;orderBy=orderBy`\n…\n"],["blocks","Lisk::Raw","Lisk/Raw.html#method-i-blocks","()","<p>The “blocks” API\n"],["blocks_get_by_id","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks_get_by_id","(id)","<p>Gets block by provided id. `GET /blocks/get?id=id`\n"],["blocks_get_fee","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks_get_fee","()","<p>Get transaction fee for sending “normal” transactions. `GET /blocks/getFee`\n"],["blocks_get_fees","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks_get_fees","()","<p>Get transaction fee for all types of transactions. `GET /blocks/getFees`\n"],["blocks_get_height","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks_get_height","()","<p>Gets the blockchain height of the client. `GET /blocks/getHeight`\n"],["blocks_get_milestone","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks_get_milestone","()","<p>Gets the milestone of the blockchain on a client. `GET\n/blocks/getMilestone`\n"],["blocks_get_nethash","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks_get_nethash","()","<p>Gets the nethash of the blockchain on a client. `GET /blocks/getNethash`\n"],["blocks_get_reward","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks_get_reward","()","<p>Gets the forging reward for blocks. `GET /blocks/getReward`\n"],["blocks_get_status","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks_get_status","()","<p>Gets status of height, fee, milestone, blockreward and supply. `GET\n/blocks/getStatus`\n"],["blocks_get_supply","Lisk::Legacy","Lisk/Legacy.html#method-i-blocks_get_supply","()","<p>Gets the total amount of Lisk in circulation `GET /blocks/getSupply`\n"],["configure","Lisk::Client","Lisk/Client.html#method-i-configure","(host, port)","<p>Allows reconfiguring of the Lisk HTTP client&#39;s host and port.\n"],["dapps","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps","(filter)","<p>`GET\n/dapps?category=category&amp;name=name&amp;type=type&amp;link=link&amp;limit=limit&amp;offset=offset&amp;orderBy=orderBy`\n…\n"],["dapps","Lisk::Raw","Lisk/Raw.html#method-i-dapps","()","<p>The “dapps” API\n"],["dapps_categories","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_categories","()","<p>`GET /dapps/categories`\n"],["dapps_get_by_id","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_get_by_id","(id)","<p>`GET /dapps/get?id=id`\n"],["dapps_install","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_install","()","<p>`POST /dapps/install`\n"],["dapps_installed","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_installed","()","<p>`GET /dapps/installed`\n"],["dapps_installed_ids","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_installed_ids","()","<p>`GET /dapps/installedIds`\n"],["dapps_installing","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_installing","()","<p>`GET /dapps/installing`\n"],["dapps_launch","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_launch","()","<p>`POST /dapps/launch`\n"],["dapps_launched","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_launched","()","<p>`GET /dapps/launched`\n"],["dapps_put","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_put","()","<p>`PUT /dapps`\n"],["dapps_search","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_search","(query)","<p>`GET /dapps/search?q=q&amp;category=category&amp;installed=installed`\n"],["dapps_stop","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_stop","()","<p>`POST /dapps/stop`\n"],["dapps_uninstall","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_uninstall","()","<p>`POST /dapps/uninstall`\n"],["dapps_uninstalling","Lisk::Legacy","Lisk/Legacy.html#method-i-dapps_uninstalling","()","<p>`GET /dapps/uninstalling`\n"],["delegates","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates","(filter = nil)","<p>Gets list of delegates by provided filter. `GET\n/delegates?limit=limit&amp;offset=offset&amp;orderBy=orderBy` …\n"],["delegates","Lisk::Raw","Lisk/Raw.html#method-i-delegates","()","<p>The “delegates” API\n"],["delegates_count","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_count","()","<p>Get total count of registered delegates. `GET /delegates/count`\n"],["delegates_forgers","Lisk::Raw","Lisk/Raw.html#method-i-delegates_forgers","()","<p>The “delegates/forgers” API\n"],["delegates_forging","Lisk::Raw","Lisk/Raw.html#method-i-delegates_forging","()","<p>The “delegates/forging” API\n"],["delegates_forging_disable","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_forging_disable","(secret)","<p>Disables forging for a delegate on the client node. `POST\n/delegates/forging/disable`\n"],["delegates_forging_enable","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_forging_enable","(secret)","<p>Enables forging for a delegate on the client node. `POST\n/delegates/forging/enable`\n"],["delegates_forging_get_forged_by_account","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_forging_get_forged_by_account","(public_key)","<p>Get amount of Lisk forged by an account. `GET\n/delegates/forging/getForgedByAccount?generatorPublicKey=generatorPublicKey`\n…\n"],["delegates_get_by_key","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_get_by_key","(public_key)","<p>Gets delegate by public key. `GET /delegates/get?publicKey=publicKey`\n"],["delegates_get_by_name","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_get_by_name","(user_name)","<p>Gets delegate by username. `GET /delegates/get?username=username`\n"],["delegates_get_next_forgers","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_get_next_forgers","(limit = 10)","<p>Get next delegate lining up to forge. `GET\n/delegates/getNextForgers?limit=limit`\n"],["delegates_put","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_put","(delegate)","<p>Puts request to create a delegate. `PUT /delegates`\n"],["delegates_search","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_search","(query)","<p>Search for Delegates by “fuzzy” username. `GET\n/delegates/search?q=username&amp;orderBy=producedblocks:desc` …\n"],["delegates_voters","Lisk::Legacy","Lisk/Legacy.html#method-i-delegates_voters","(public_key)","<p>Gets voters of delegate. `GET /delegates/voters?publicKey=publicKey`\n"],["get_available_supply","Lisk::API","Lisk/API.html#method-i-get_available_supply","()","<p>Get the available supply.\n"],["get_banned_peers","Lisk::API","Lisk/API.html#method-i-get_banned_peers","()","<p>Get an array of all banned peers.\n"],["get_best_block","Lisk::API","Lisk/API.html#method-i-get_best_block","()","<p>Get the height of the local best known block.\n"],["get_block_reward","Lisk::API","Lisk/API.html#method-i-get_block_reward","()","<p>Get the current block reward.\n"],["get_broadhash","Lisk::API","Lisk/API.html#method-i-get_broadhash","()","<p>Get the broad hash.\n"],["get_chain_best_block","Lisk::API","Lisk/API.html#method-i-get_chain_best_block","()","<p>Get the global best block in the network.\n"],["get_connected_peers","Lisk::API","Lisk/API.html#method-i-get_connected_peers","()","<p>Get an array of all connected peers.\n"],["get_disconnected_peers","Lisk::API","Lisk/API.html#method-i-get_disconnected_peers","()","<p>Get an array of all disconnected peers.\n"],["get_epoch","Lisk::API","Lisk/API.html#method-i-get_epoch","()","<p>Get the current epoch date.\n"],["get_milestone","Lisk::API","Lisk/API.html#method-i-get_milestone","()","<p>Get the current milestone.\n"],["get_nethash","Lisk::API","Lisk/API.html#method-i-get_nethash","()","<p>Get the net hash.\n"],["get_peer_count","Lisk::API","Lisk/API.html#method-i-get_peer_count","()","<p>Get the number of all known peers.\n"],["get_peers","Lisk::API","Lisk/API.html#method-i-get_peers","()","<p>Get an array of all known peers.\n"],["get_remaining_blocks","Lisk::API","Lisk/API.html#method-i-get_remaining_blocks","()","<p>Get the number of remaining local sync blocks.\n"],["get_version","Lisk::API","Lisk/API.html#method-i-get_version","()","<p>Get the Lisk node version string.\n"],["get_version_build","Lisk::API","Lisk/API.html#method-i-get_version_build","()","<p>Get the Lisk node version build date.\n"],["get_version_commit","Lisk::API","Lisk/API.html#method-i-get_version_commit","()","<p>Get the Lisk node version commit.\n"],["is_alive?","Lisk::Client","Lisk/Client.html#method-i-is_alive-3F","()","<p>Get the status of last received block. Returns true if block was received\nin the past 120 seconds.\n"],["is_chain_loaded?","Lisk::API","Lisk/API.html#method-i-is_chain_loaded-3F","()","<p>Returns true if chain is loaded.\n"],["is_registered?","Lisk::Delegate","Lisk/Delegate.html#method-i-is_registered-3F","()",""],["is_syncing?","Lisk::API","Lisk/API.html#method-i-is_syncing-3F","()","<p>Returns true if chain is syncing.\n"],["loader_status","Lisk::Legacy","Lisk/Legacy.html#method-i-loader_status","()","<p>Returns the sync status of the blockchain. `GET /loader/status/sync`\n"],["loader_status_ping","Lisk::Legacy","Lisk/Legacy.html#method-i-loader_status_ping","()","<p>Get the status of last received block. Returns true if block was received\nin the past 120 seconds. `GET …\n"],["loader_status_sync","Lisk::Legacy","Lisk/Legacy.html#method-i-loader_status_sync","()","<p>Get the synchronization status of the client. `GET /loader/status`\n"],["method_missing","Lisk","Lisk.html#method-i-method_missing","(name, *args, &block)","<p>Handles unimplemented methods\n"],["method_missing","Lisk::API","Lisk/API.html#method-i-method_missing","(name, *args, &block)","<p>Handles unimplemented methods\n"],["method_missing","Lisk::Client","Lisk/Client.html#method-i-method_missing","(name, *args, &block)","<p>Handles unimplemented methods\n"],["method_missing","Lisk::Legacy","Lisk/Legacy.html#method-i-method_missing","(name, *args, &block)","<p>Handles unimplemented methods\n"],["method_missing","Lisk::Raw","Lisk/Raw.html#method-i-method_missing","(name, *args, &block)","<p>Handles unimplemented methods\n"],["multisignatures_accounts","Lisk::Legacy","Lisk/Legacy.html#method-i-multisignatures_accounts","(public_key)","<p>Gets a list of accounts that belong to a multi-signature account. `GET\n/multisignatures/accounts?publicKey=publicKey` …\n"],["multisignatures_pending","Lisk::Legacy","Lisk/Legacy.html#method-i-multisignatures_pending","(public_key)","<p>Returns a list of multi-signature transactions that waiting for signature\nby publicKey. `GET /multisignatures/pending …\n"],["multisignatures_put","Lisk::Legacy","Lisk/Legacy.html#method-i-multisignatures_put","(secrets)","<p>Create a multi-signature account. `PUT /multisignatures`\n"],["multisignatures_sign","Lisk::Legacy","Lisk/Legacy.html#method-i-multisignatures_sign","(signature)","<p>Signs a transaction that is awaiting signature. `POST\n/multisignatures/sign`\n"],["new","Lisk::Client","Lisk/Client.html#method-c-new","(host = \"127.0.0.1\", port = 7000)","<p>Initializes the Lisk HTTP client and defaults to localhost port 7000.\n"],["new","Lisk::Delegate","Lisk/Delegate.html#method-c-new","(api, delegate_name)",""],["new","Lisk::Legacy","Lisk/Legacy.html#method-c-new","(client)","<p>Initializing the legacy API with a legacy Lisk Core API client.\n"],["new","Lisk::Raw","Lisk/Raw.html#method-c-new","(client)","<p>Initializing the API with a Lisk Core API client.\n"],["node_constants","Lisk::Raw","Lisk/Raw.html#method-i-node_constants","()","<p>The “node/constants” API\n"],["node_status","Lisk::Raw","Lisk/Raw.html#method-i-node_status","()","<p>The “node/status” API\n"],["peers","Lisk::Legacy","Lisk/Legacy.html#method-i-peers","(filter = nil)","<p>Gets list of peers. `GET\n/peers?state=state&amp;os=os&amp;version=version&amp;limit=limit&amp;offset=offset&amp;orderBy=orderBy`\n…\n"],["peers","Lisk::Raw","Lisk/Raw.html#method-i-peers","()","<p>The “peers” API\n"],["peers_get","Lisk::Legacy","Lisk/Legacy.html#method-i-peers_get","(filter = nil)","<p>Gets peer by IP address and port. `GET /peers/get?ip=ip&amp;port=port`\n"],["peers_version","Lisk::Legacy","Lisk/Legacy.html#method-i-peers_version","()","<p>Gets version and build time. `GET /peers/version`\n"],["query_get","Lisk::Client","Lisk/Client.html#method-i-query_get","(endpoint, params = nil)","<p>Handles GET requests to the given Lisk Core API endpoint\n"],["query_post","Lisk::Client","Lisk/Client.html#method-i-query_post","(endpoint, params)","<p>Handles POST requests to the given Lisk Core API endpoint\n"],["query_put","Lisk::Client","Lisk/Client.html#method-i-query_put","(endpoint, params)","<p>Handles PUT requests to the given Lisk Core API endpoint\n"],["register","Lisk::Delegate","Lisk/Delegate.html#method-i-register","()",""],["set_secrets","Lisk::Delegate","Lisk/Delegate.html#method-i-set_secrets","(secret, second_secret = nil)",""],["signatures","Lisk::Raw","Lisk/Raw.html#method-i-signatures","()","<p>The “signatures” API\n"],["signatures_fee","Lisk::Legacy","Lisk/Legacy.html#method-i-signatures_fee","()","<p>Gets the second signature status of an account. `GET /signatures/fee`\n"],["signatures_put","Lisk::Legacy","Lisk/Legacy.html#method-i-signatures_put","(secrets)","<p>Add a second signature to an account. `PUT /signatures`\n"],["transactions","Lisk::Legacy","Lisk/Legacy.html#method-i-transactions","(filter = nil)","<p>List of transactions matched by provided parameters. `GET\n/transactions?blockId=blockId&amp;senderId=senderId&amp;recipientId=recipientId&amp;limit=limit&amp;offset=offset&amp;orderBy=field`\n…\n"],["transactions","Lisk::Raw","Lisk/Raw.html#method-i-transactions","()","<p>The “transactions” API\n"],["transactions_get_by_id","Lisk::Legacy","Lisk/Legacy.html#method-i-transactions_get_by_id","(id)","<p>Get transaction that matches the provided id. `GET /transactions/get?id=id`\n"],["transactions_put","Lisk::Legacy","Lisk/Legacy.html#method-i-transactions_put","(transaction)","<p>Send transaction to broadcast network. `PUT /transactions`\n"],["transactions_queued","Lisk::Legacy","Lisk/Legacy.html#method-i-transactions_queued","()","<p>Gets a list of queued transactions. `GET /transactions/queued`\n"],["transactions_queued_get_by_id","Lisk::Legacy","Lisk/Legacy.html#method-i-transactions_queued_get_by_id","(id)","<p>Get queued transaction that matches the provided id. `GET\n/transactions/queued/get?id=id`\n"],["transactions_unconfirmed","Lisk::Legacy","Lisk/Legacy.html#method-i-transactions_unconfirmed","()","<p>Gets a list of unconfirmed transactions. `GET /transactions/unconfirmed`\n"],["transactions_unconfirmed","Lisk::Raw","Lisk/Raw.html#method-i-transactions_unconfirmed","()","<p>The “transactions/unconfirmed” API\n"],["transactions_unconfirmed_get_by_id","Lisk::Legacy","Lisk/Legacy.html#method-i-transactions_unconfirmed_get_by_id","(id)","<p>Get unconfirmed transaction that matches the provided id. `GET\n/transactions/unconfirmed/get?id=id`\n"],["transactions_unprocessed","Lisk::Raw","Lisk/Raw.html#method-i-transactions_unprocessed","()","<p>The “transactions/unprocessed” API\n"],["transactions_unsigned","Lisk::Raw","Lisk/Raw.html#method-i-transactions_unsigned","()","<p>The “transactions/unsigned” API\n"],["voters","Lisk::Raw","Lisk/Raw.html#method-i-voters","()","<p>The “voters” API\n"],["votes","Lisk::Raw","Lisk/Raw.html#method-i-votes","()","<p>The “votes” API\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p>git_source(:github) {|repo_name| “github.com/#{repo_name}” } …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  lisk (0.6.0)\n    todonotes (~&gt; 0.2.2)</pre>\n<p>GEM\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2017 4fryn Dings\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","README_md.html","","<p>Lisk.rb\n<p>A simple Ruby wrapper for the Lisk API. 💎\n<p><img src=\"examples/4fryn-lisk-rb.gif\">\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require “rspec/core/rake_task”\n<p>RSpec::Core::RakeTask.new …\n"],["debug","","bin/debug.html","","<p>#!/usr/bin/env bash\n<p>echo $PWD\n<p>gem uninstall lisk rm pkg/*.gem git add -A bundle exec rake install ruby …\n"],["setup","","bin/setup.html","","<p>#!/usr/bin/env bash set -euo pipefail IFS=$&#39;nt&#39; set -vx\n<p>bundle install\n<p># Do any other automated …\n"],["lisk.gemspec","","lisk_gemspec.html","","<p>lib = File.expand_path(“../lib”, __FILE__) $LOAD_PATH.unshift(lib) unless\n$LOAD_PATH.include?(lib) …\n"]]}}